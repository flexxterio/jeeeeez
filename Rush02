#include <fcntl.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

typedef struct {
    unsigned long number;
    char *written_form;
} Entry;

int is_digit(char c) {
    return c >= '0' && c <= '9';
}

int get_file_size(const char *filename) {
    int fd = open(filename, O_RDONLY);
    if (fd < 0) {
        return -1;
    }

    int file_size = 0;
    char buffer;
    int bytes_read;

    while ((bytes_read = read(fd, &buffer, 1)) > 0) {
        file_size += bytes_read;
    }

    close(fd);
    return file_size;
}

int cmp_entry(const void *a, const void *b) {
    Entry *entry_a = (Entry*) a;
    Entry *entry_b = (Entry*) b;

    if (entry_a->number < entry_b->number) {
        return 1;
    } else if (entry_a->number > entry_b->number) {
        return -1;
    } else {
        return 0;
    }
}


Entry *parse_dictionary(const char *filename, size_t *num_entries) {
    int fd = open(filename, O_RDONLY);  // Open the file with read-only mode and get a file descriptor
    if (fd < 0) {
        return NULL;  // If the file cannot be opened, return NULL
    }

    int file_size = get_file_size(filename);  // Get the file size in bytes
    char *buffer = malloc(file_size + 1);  // Allocate memory for a buffer with size equal to file size plus one byte for null terminator
    if (!buffer) {
        close(fd);
        return NULL;  // If memory allocation fails, close the file and return NULL
    }

    read(fd, buffer, file_size);  // Read the contents of the file into the buffer
    buffer[file_size] = '\0';  // Add a null terminator to the end of the buffer
    close(fd);  // Close the file descriptor

    int lines = 0;  // Initialize a counter for the number of lines in the file
    int i = 0;  // Initialize a counter for the current index in the buffer
    while (i < file_size) {  // While not at the end of the buffer
        if (buffer[i] == '\n') {  // If a newline character is found
            lines++;  // Increment the line counter
        }
        i++;  // Increment the buffer index counter
    }

    Entry *entries = malloc(lines * sizeof(Entry));  // Allocate memory for an array of Entry structs with size equal to the number of lines in the file
    if (!entries) {
        free(buffer);
        return NULL;  // If memory allocation fails, free the buffer and return NULL
    }

    int idx = 0;  // Initialize a counter for the current index in the buffer
    i = 0;  // Initialize a counter for the current index in the entries array
    while (i < lines) {  // While not at the end of the entries array
        int key = 0;  // Initialize a variable to hold the key (number) of the current entry
        while (is_digit(buffer[idx])) {  // While the current character in the buffer is a digit
            key = key * 10 + (buffer[idx] - '0');  // Convert the digit to a number and add it to the key variable
            idx++;  // Increment the buffer index counter
        }

        while (buffer[idx] == ' ' || buffer[idx] == ':') {  // Skip over any whitespace or colons
            idx++;  // Increment the buffer index counter
        }

        int value_start = idx;  // Record the starting index of the value (written form) of the current entry
        while (buffer[idx] != '\n') {  // While not at the end of the line (i.e., the end of the value)
            idx++;  // Increment the buffer index counter
        }

        int j = 0;  // Initialize a counter for the current index in the written form string
        entries[i].written_form = malloc(idx - value_start + 1);  // Allocate memory for the written form string with size equal to the length of the string plus one byte for null terminator
        while (j < (idx - value_start)) {  // While not at the end of the written form string
            entries[i].written_form[j] = buffer[value_start + j];  // Copy the current character from the buffer to the written form string
                    }
        // Add a null terminator to the end of the written form buffer
        entries[i].written_form[j] = '\0';
        // Store the key (i.e., the number) in the entry struct
        entries[i].number = key;

        idx++;
        i++;
    }

    // Sort the entries in the dictionary in descending order of their key values
    i = 0;
    while (i < lines - 1) {
        int j = i + 1;
        while (j < lines) {
            if (entries[i].number < entries[j].number) {
                Entry temp = entries[i];
                entries[i] = entries[j];
                entries[j] = temp;
            }
            j++;
        }
        i++;
    }

    // Store the number of entries in the dictionary
    *num_entries = lines;
    // Free the buffer used to store the contents of the dictionary file
    free(buffer);
    // Return the array of entries in the dictionary
    return entries;
}



void ft_putnbr(int n) {
    char c;

    if (n < 0) {
        write(1, "-", 1);
        n *= -1;
    }

    if (n >= 10) {
        ft_putnbr(n / 10);
    }

    c = (n % 10) + '0';
    write(1, &c, 1);
}

void ft_putstr(const char *str) {
    int i = 0;
    while (str[i]) {
        write(1, &str[i], 1);
        i++;
    }
}

char *number_to_written_form(unsigned long number, Entry *dict, size_t dict_size) {
    // Find the largest number in the dictionary that is less than or equal to the input number
    int i = dict_size - 1;
    while (i >= 0 && dict[i].number > number) {
        i--;
    }

    // Allocate memory for the written form of the number
    char *written_form = malloc(1024);
    if (!written_form) {
        return NULL;
    }

    // Write the written form of the number into the allocated buffer
    written_form[0] = '\0';
    while (number > 0 && i >= 0) {
        if (dict[i].number <= number) {
            strcat(written_form, dict[i].written_form);
            number -= dict[i].number;
        } else {
            i--;
        }
    }

    // If the input number was not fully converted to its written form, free memory and return NULL
    if (number > 0) {
        free(written_form);
        return NULL;
    }

    return written_form;
}



void free_dictionary(Entry *dict, size_t dict_size) {
	int i = 0;
    while (i < (int)dict_size) {
        free(dict[i].written_form);
        i++;
    }
    free(dict);
}

int main(int argc, char *argv[]) {
    const char *dictionary_filename = "Numbers.txt";
    const char *number_str;
    char *written_form;
    unsigned long number;
    Entry *dictionary;
    size_t dict_size;

    // Parse command line arguments
    if (argc == 2) {
        number_str = argv[1];
    } else if (argc == 3) {
        dictionary_filename = argv[1];
        number_str = argv[2];
    } else {
        const char usage[] = "Usage: %s [dictionary_file] number\n";
        write(2, usage, sizeof(usage) - 1);
        return 1;
    }

    // Convert the number string to an unsigned long integer
    char *endptr;
    number = strtoul(number_str, &endptr, 10);
    if (*endptr != '\0') {
        const char error[] = "Error\n";
        write(2, error, sizeof(error) - 1);
        return 1;
    }

    // Parse the dictionary
    dictionary = parse_dictionary(dictionary_filename, &dict_size);
    if (!dictionary) {
        const char error[] = "Dict Error\n";
        write(2, error, sizeof(error) - 1);
        return 1;
    }

    // Convert the number to its written form
    written_form = number_to_written_form(number, dictionary, dict_size);
    if (!written_form) {
        const char error[] = "Dict Error\n";
        write(2, error, sizeof(error) - 1);
    } else {
        write(1, written_form, strlen(written_form));
        const char newline[] = "\n";
        write(1, newline, sizeof(newline) - 1);
        free(written_form);
    }

    // Free the memory used by the dictionary
    free_dictionary(dictionary, dict_size);

    return 0;
}

