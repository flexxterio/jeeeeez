#include <fcntl.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

typedef struct {
    unsigned long number;
    char *written_form;
} Entry;

int is_digit(char c) {
    return c >= '0' && c <= '9';
}

int get_file_size(const char *filename) {
    int fd = open(filename, O_RDONLY);
    if (fd < 0) {
        return -1;
    }

    int file_size = 0;
    char buffer;
    int bytes_read;

    while ((bytes_read = read(fd, &buffer, 1)) > 0) {
        file_size += bytes_read;
    }

    close(fd);
    return file_size;
}

int cmp_entry(const void *a, const void *b) {
    Entry *entry_a = (Entry*) a;
    Entry *entry_b = (Entry*) b;

    if (entry_a->number < entry_b->number) {
        return 1;
    } else if (entry_a->number > entry_b->number) {
        return -1;
    } else {
        return 0;
    }
}


Entry *parse_dictionary(const char *filename, size_t *num_entries) {
    int fd = open(filename, O_RDONLY);  // Open the file with read-only mode and get a file descriptor
    if (fd < 0) {
        return NULL;  // If the file cannot be opened, return NULL
    }

    int file_size = get_file_size(filename);  // Get the file size in bytes
    char *buffer = malloc(file_size + 1);  // Allocate memory for a buffer with size equal to file size plus one byte for null terminator
    if (!buffer) {
        close(fd);
        return NULL;  // If memory allocation fails, close the file and return NULL
    }

    read(fd, buffer, file_size);  // Read the contents of the file into the buffer
    buffer[file_size] = '\0';  // Add a null terminator to the end of the buffer
    close(fd);  // Close the file descriptor

    int lines = 0;  // Initialize a counter for the number of lines in the file
    int i = 0;  // Initialize a counter for the current index in the buffer
    while (i < file_size) {  // While not at the end of the buffer
        if (buffer[i] == '\n') {  // If a newline character is found
            lines++;  // Increment the line counter
        }
        i++;  // Increment the buffer index counter
    }

    Entry *entries = malloc(lines * sizeof(Entry));  // Allocate memory for an array of Entry structs with size equal to the number of lines in the file
    if (!entries) {
        free(buffer);
        return NULL;  // If memory allocation fails, free the buffer and return NULL
    }

    int idx = 0;  // Initialize a counter for the current index in the buffer
    i = 0;  // Initialize a counter for the current index in the entries array
    while (i < lines) {  // While not at the end of the entries array
        int key = 0;  // Initialize a variable to hold the key (number) of the current entry
        while (is_digit(buffer[idx])) {  // While the current character in the buffer is a digit
            key = key * 10 + (buffer[idx] - '0');  // Convert the digit to a number and add it to the key variable
            idx++;  // Increment the buffer index counter
        }

        while (buffer[idx] == ' ' || buffer[idx] == ':') {  // Skip over any whitespace or colons
            idx++;  // Increment the buffer index counter
        }

        int value_start = idx;  // Record the starting index of the value (written form) of the current entry
        while (buffer[idx] != '\n') {  // While not at the end of the line (i.e., the end of the value)
            idx++;  // Increment the buffer index counter
        }

        int j = 0;  // Initialize a counter for the current index in the written form string
        entries[i].written_form = malloc(idx - value_start + 1);  // Allocate memory for the written form string with size equal to the length of the string plus one byte for null terminator
        while (j < (idx - value_start)) {  // While not at the end of the written form string
            entries[i].written_form[j] = buffer[value_start + j];  // Copy the current character from the buffer to the written form string
